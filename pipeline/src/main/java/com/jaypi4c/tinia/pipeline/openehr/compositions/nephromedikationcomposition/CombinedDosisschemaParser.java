package com.jaypi4c.tinia.pipeline.openehr.compositions.nephromedikationcomposition;

import com.jaypi4c.tinia.pipeline.openehr.compositions.nephromedikationcomposition.definition.*;
import com.jaypi4c.tinia.pipeline.validation.IActiveIngredientValidator;
import com.jaypi4c.tinia.pipeline.validation.helpers.DarreichungsformHelper;
import com.jaypi4c.tinia.pipeline.validation.helpers.EinheitenHelper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAccessor;
import java.util.List;

@Slf4j
@Component
public class CombinedDosisschemaParser extends MedicationParser {

    CombinedDosisschemaParser(IActiveIngredientValidator validator, DarreichungsformHelper darreichungsformHelper, EinheitenHelper einheitenHelper) {
        super(validator, darreichungsformHelper, einheitenHelper);
    }

    public VerordnungVonArzneimittelInstruction parse(String date, String[] row) {
        if (row.length != 8) {
            log.warn("Wrong row length ({} instead of 8)", row.length);
            return null;
        }

        String wirkstoff = row[0].trim();
        validateWirkstoff(wirkstoff);

        String handelsname = row[1].trim();
        String staerke = row[2].trim();
        String form = row[3].trim();
        String dosisschema = row[4].trim();
        String einheit = row[5].trim();
        String hinweise = row[6].trim();
        String grund = row[7].trim();

        form = checkForm(form);

        einheit = checkEinheit(einheit);

        VerordnungVonArzneimittelInstruction arzneimittel = prepareInstruction(new VerordnungVonArzneimittelInstruction());

        VerordnungVonArzneimittelVerordnungActivity verordnung = new VerordnungVonArzneimittelVerordnungActivity();
        verordnung.setHandelsnameValue(handelsname);
        verordnung.setHinweiseZurEinnahmeValue(hinweise);
        verordnung.setEinnahmegrundValue(grund);
        verordnung.setKommentarValue("Entry generated by Medication Plan Pipeline (automated)");

        ArzneimittelCluster arzneimittelCluster = getArzneimittelCluster(form, wirkstoff, staerke);
        verordnung.setArzneimittel(arzneimittelCluster);

        TherapeutischeAnweisungCluster therapeutischeAnweisungCluster = new TherapeutischeAnweisungCluster();
        DosierungCluster dosierungCluster = new DosierungCluster();
        dosierungCluster.setDosierungFreitextValue(dosisschema);
        List<DosierungCluster> dosierungen = List.of(dosierungCluster);
        therapeutischeAnweisungCluster.setDosierung(dosierungen);

        verordnung.setTherapeutischeAnweisung(List.of(therapeutischeAnweisungCluster));


        try {
            TemporalAccessor datumDerVerordnungValue = dateFormatter.parse(date);
            verordnung.setDatumDerVerordnungValue(datumDerVerordnungValue);
        } catch (DateTimeParseException | NullPointerException e) {
            log.error("Error while parsing date; Maybe it's blacked out or not found in the pdf");
        }

        arzneimittel.setVerordnung(List.of(verordnung));
        return arzneimittel;
    }

}
