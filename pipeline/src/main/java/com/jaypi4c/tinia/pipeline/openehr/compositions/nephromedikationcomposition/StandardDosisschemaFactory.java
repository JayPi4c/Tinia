package com.jaypi4c.tinia.pipeline.openehr.compositions.nephromedikationcomposition;

import com.jaypi4c.tinia.pipeline.openehr.compositions.nephromedikationcomposition.definition.*;
import com.jaypi4c.tinia.pipeline.validation.IActiveIngredientValidator;
import com.jaypi4c.tinia.pipeline.validation.helpers.DarreichungsformHelper;
import com.jaypi4c.tinia.pipeline.validation.helpers.EinheitenHelper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAccessor;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Component
public class StandardDosisschemaFactory extends MedicationParser {

    public StandardDosisschemaFactory(IActiveIngredientValidator validator, DarreichungsformHelper darreichungsformHelper, EinheitenHelper einheitenHelper) {
        super(validator, darreichungsformHelper, einheitenHelper);
    }


    public VerordnungVonArzneimittelInstruction parse(String date, String[] row) {
        if (row.length != 11) {
            log.warn("Wrong row length ({} instead of 11)", row.length);
            return null;
        }
        String wirkstoff = row[0].trim();
        validateWirkstoff(wirkstoff);

        String handelsname = row[1].trim();
        String staerke = row[2].trim();
        String form = row[3].trim();
        String morgens = row[4].trim();
        String mittags = row[5].trim();
        String abends = row[6].trim();
        String nacht = row[7].trim();
        String einheit = row[8].trim();
        String hinweise = row[9].trim();
        String grund = row[10].trim();


        form = checkForm(form);

        einheit = checkEinheit(einheit);

        VerordnungVonArzneimittelInstruction arzneimittel = prepareInstruction(new VerordnungVonArzneimittelInstruction());


        VerordnungVonArzneimittelVerordnungActivity verordnung = new VerordnungVonArzneimittelVerordnungActivity();
        verordnung.setHandelsnameValue(handelsname);
        verordnung.setHinweiseZurEinnahmeValue(hinweise);
        verordnung.setEinnahmegrundValue(grund);
        verordnung.setKommentarValue("Entry generated by Medication Plan Pipeline (automated)");


        ArzneimittelCluster arzneimittelCluster = getArzneimittelCluster(form, wirkstoff, staerke);
        verordnung.setArzneimittel(arzneimittelCluster);

        TherapeutischeAnweisungCluster therapeutischeAnweisungCluster = new TherapeutischeAnweisungCluster();
        List<DosierungCluster> dosierungen = new ArrayList<>();
        // morgens
        if (!morgens.isBlank()) {
            double dosismenge = parseDosisMenge(morgens);
            DosierungCluster dosierungCluster = getDosierungCluster(dosismenge, einheit, "Lorem Ipsum", "morgens");
            dosierungen.add(dosierungCluster);
        }
        if (!mittags.isBlank()) {
            double dosismenge = parseDosisMenge(mittags);
            DosierungCluster dosierungCluster = getDosierungCluster(dosismenge, einheit, "Lorem Ipsum", "mittags");
            dosierungen.add(dosierungCluster);
        }
        if (!abends.isBlank()) {
            double dosismenge = parseDosisMenge(abends);
            DosierungCluster dosierungCluster = getDosierungCluster(dosismenge, einheit, "Lorem Ipsum", "abends");
            dosierungen.add(dosierungCluster);
        }
        if (!nacht.isBlank()) {
            double dosismenge = parseDosisMenge(nacht);
            DosierungCluster dosierungCluster = getDosierungCluster(dosismenge, einheit, "Lorem Ipsum", "nachts");
            dosierungen.add(dosierungCluster);
        }
        therapeutischeAnweisungCluster.setDosierung(dosierungen);
        verordnung.setTherapeutischeAnweisung(List.of(therapeutischeAnweisungCluster));


        try {
            TemporalAccessor datumDerVerordnungValue = dateFormatter.parse(date);
            verordnung.setDatumDerVerordnungValue(datumDerVerordnungValue);
        } catch (DateTimeParseException | NullPointerException e) {
            log.error("Error while parsing date; Maybe it's blacked out or not found in the pdf");
        }

        arzneimittel.setVerordnung(List.of(verordnung));
        return arzneimittel;
    }

    //https://stackoverflow.com/a/10372905/13670629
    private double parseDosisMenge(String dosisMenge) {
        String s = dosisMenge.replaceAll("[^\\d.,]", "");
        s = s.replace(",", ".");
        if (s.isEmpty())
            return 0;
        return Double.parseDouble(s);
    }

    private DosierungCluster getDosierungCluster(double dosismenge, String dosisEinheit, String dosierungFreitext, String ereignis) {
        DosierungCluster dosierungCluster = new DosierungCluster();
        dosierungCluster.setDosismengeMagnitude(dosismenge);
        dosierungCluster.setDosismengeUnits("1");// dosisEinheit);
        dosierungCluster.setDosiseinheitValue(dosisEinheit);
        dosierungCluster.setDosierungFreitextValue(dosierungFreitext);

        TaeglicheDosierungBestimmtesEreignisCluster taeglicheDosierungBestimmtesEreignisCluster = new TaeglicheDosierungBestimmtesEreignisCluster();
        taeglicheDosierungBestimmtesEreignisCluster.setEreignisValue(ereignis);


        TaeglicheDosierungCluster taeglicheDosierungCluster = new TaeglicheDosierungCluster();
        taeglicheDosierungCluster.setBestimmtesEreignis(List.of(taeglicheDosierungBestimmtesEreignisCluster));
        // taeglicheDosierungCluster.setBeiBedarfValue(false);

        dosierungCluster.setTaeglicheDosierung(List.of(taeglicheDosierungCluster));
        return dosierungCluster;
    }


}
